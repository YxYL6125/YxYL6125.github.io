<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>K8S笔记1</title>
      <link href="/2022/09/18/K8S%E7%AC%94%E8%AE%B01/"/>
      <url>/2022/09/18/K8S%E7%AC%94%E8%AE%B01/</url>
      
        <content type="html"><![CDATA[<h1>Kubernetes</h1><blockquote><p>K8S</p><p>一项基于生产环境级别下容器化编排自动化部署技术</p></blockquote><p>这里的编排指的是：</p><ul><li>按照一定的目的一次排列</li><li>调配、安排</li></ul>]]></content>
      
      
      <categories>
          
          <category> Tech-Stuck </category>
          
          <category> K8S </category>
          
      </categories>
      
      
        <tags>
            
            <tag> K8S </tag>
            
            <tag> 学习笔记 </tag>
            
            <tag> 运维 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>微服务简单部署</title>
      <link href="/2022/09/18/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E7%AE%80%E5%8D%95%E9%83%A8%E7%BD%B2/"/>
      <url>/2022/09/18/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E7%AE%80%E5%8D%95%E9%83%A8%E7%BD%B2/</url>
      
        <content type="html"><![CDATA[<h1>微服务简单部署</h1><h2 id="📋：Docker-Conpose"><a class="header-anchor" href="#📋：Docker-Conpose">¶</a>📋：Docker-Conpose</h2><ul><li>Docker-Compose是一个用来定义和运行复杂应用的docker工具。一个使用Docker容器的应用，一般是由多个容器组成。使用Docker-Compose就不用写多个shell脚本来启动管理容器了。</li></ul><ol><li>查看docker版本：<br><code>docker -version </code></li><li>安装docker-compose<br><code>sudo apt install docker-compose</code></li><li>查看docker-compose版本<br><code>docker-compose -version</code></li></ol><h2 id="➰：打包"><a class="header-anchor" href="#➰：打包">¶</a>➰：打包</h2><ul><li>在项目目录下创建image包，放每个微服务打包好的镜像，可选择每个微服务单独一个包，以便于以后微服务版本的维护，回滚。</li></ul><h2 id="🚉：Dockerfile"><a class="header-anchor" href="#🚉：Dockerfile">¶</a>🚉：Dockerfile</h2><ul><li><p>在每个微服务包下编写Dockerfile</p><figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">FROM</span> openjdk:<span class="number">8</span>-jre</span><br><span class="line"><span class="keyword">ENV</span> APP_PATH=/apps</span><br><span class="line"><span class="keyword">WORKDIR</span><span class="language-bash"> <span class="variable">$APP_PATH</span></span></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> xxx-1.0-SNAPSHOT.jar <span class="variable">$APP_PATH</span>/app.jar</span></span><br><span class="line"><span class="keyword">EXPOSE</span> $&#123;PORT&#125;</span><br><span class="line"><span class="keyword">ENTRYPOINT</span><span class="language-bash"> [<span class="string">&quot;java&quot;</span>,<span class="string">&quot;-jar&quot;</span>]</span></span><br><span class="line"><span class="keyword">CMD</span><span class="language-bash"> [<span class="string">&quot;app.jar&quot;</span>]</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="上传Docker-Compose文件"><a class="header-anchor" href="#上传Docker-Compose文件">¶</a>上传Docker-Compose文件</h2><ul><li><p>在<code>Docker-Compose</code>文件中编写服务：</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&quot;3.3&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">networks:</span> <span class="comment">#定义docker网络</span></span><br><span class="line">  <span class="attr">yingxue_network:</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="attr">volumes:</span> <span class="comment">#挂载数据卷</span></span><br><span class="line">  <span class="attr">data:</span></span><br><span class="line">  <span class="attr">redisdata:</span></span><br><span class="line">  <span class="attr">mqdata:</span></span><br><span class="line"></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line"><span class="comment">#每个服务</span></span><br><span class="line">  <span class="attr">nacos:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">nacos/nacos-server:2.0.2</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;8848:8848&quot;</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;JVM_XMS=256m&quot;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;JVM_XMX=256m&quot;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;MODE=standalone&quot;</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">yingxue_network</span></span><br><span class="line">        </span><br><span class="line">  <span class="attr">mysql:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">mysql</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;3306:3306&quot;</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">yingxue_network</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">data:/var/lib/mysql</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./yingxue.sql:/docker-entrypoint-initdb.d/yingxue.sql</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;MYSQL_ROOT_PASSWORD=&quot;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;MYSQL_DATABASE=yingxue&quot;</span></span><br><span class="line">  <span class="attr">redis:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">redis</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;6379:6379&quot;</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">redisdata:/data</span></span><br><span class="line">    <span class="attr">command:</span> <span class="string">redis-server</span></span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">  <span class="string">xxx服务:</span></span><br><span class="line">  <span class="attr">build:</span></span><br><span class="line">  <span class="attr">context:</span> <span class="string">./images/xxx</span></span><br><span class="line">  <span class="attr">dockerfile:</span> <span class="string">Dockerfile</span></span><br><span class="line">  <span class="attr">ports:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&quot;xxxx:xxxx&quot;</span></span><br><span class="line">  <span class="attr">depends_on:</span></span><br><span class="line">  <span class="string">-mysql</span></span><br><span class="line">  <span class="string">-redis</span></span><br><span class="line">  <span class="string">-rebbitmq</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">....</span></span><br></pre></td></tr></table></figure><p>这里是将每个软件服务和写的微服务写在同一个<code>docker-compose</code>文件中，可以的分成两个<code>docker-compose</code>，可将其划分成：</p><ol><li>docker-compose-app.yml：微服务</li><li>docker-compose-env.yml：环境服务</li></ol></li></ul><h2 id="🚀：点火"><a class="header-anchor" href="#🚀：点火">¶</a>🚀：点火</h2><ul><li>cd到docker-compose文件，</li><li><code>docker-compose up -d</code></li></ul>]]></content>
      
      
      <categories>
          
          <category> Tech-Stuck </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 微服务 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Gateway自定义网关Filter</title>
      <link href="/2022/09/18/Gateway%E8%87%AA%E5%AE%9A%E4%B9%89%E7%BD%91%E5%85%B3Filter/"/>
      <url>/2022/09/18/Gateway%E8%87%AA%E5%AE%9A%E4%B9%89%E7%BD%91%E5%85%B3Filter/</url>
      
        <content type="html"><![CDATA[<h1>SpringCloud-Gateway自定义网关Filter</h1><p>自定义filter可以实现两种，一种是全局生效的，一种是局部生效的，需要配置。</p><p>🖕：这边自定义下局部的</p><ol><li><p>首先命名为：<code>xxxGatewayFilterFactory</code>比如<code>TokenGatewayFilterFactory</code>，<code>AddLogGatewayFilterFactory</code>等等，再注入IOC管理</p></li><li><p>然后，通过看其他自带的局部(全局)Filter类可以看出，他们都继承了<code>AbstractGatewayFilterFactory</code>这个抽象类，</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TokenGatewayFilterFactory</span> <span class="keyword">extends</span> <span class="title class_">AbstractGatewayFilterFactory</span>&lt;TokenGatewayFilterFactory.Config&gt;</span><br></pre></td></tr></table></figure><p>其中的泛型是Filter类中自定义的内部类<code>Config</code></p></li><li><p>重写<code>apply()</code>，<code>shortcutFieldOrder()</code>方法，</p><ul><li>其中apply是核心方法，它决定着我们需要的过滤业务，</li><li>shortcutFieldOrder()方法可根据自定义顺序接收我们从配置文件传过来的value</li></ul></li><li><p>创建Filter构造方法，可以传进来需要用到的工具类等等…</p></li></ol><p>🆗：Filter over后，需要我们在网关配置文件中每个需要Filter的路由中进行配置了，可传的参数由shortcutFieldOrder决定。</p>]]></content>
      
      
      <categories>
          
          <category> Tech-Stuck </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Filter </tag>
            
            <tag> Gateway </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JUC</title>
      <link href="/2022/09/17/JUC/"/>
      <url>/2022/09/17/JUC/</url>
      
        <content type="html"><![CDATA[<h2 id="🌠-JUC是什么"><a class="header-anchor" href="#🌠-JUC是什么">¶</a>🌠:JUC是什么</h2><p>JUC是<code>java.util.concurrent</code>包的缩写，这个包里包含了各种各样的关于线程通讯，控制同步的工具类——&gt;即Java并发工具包。</p><p>另外，JUC的框架结构，并不是我们常见的继承实现框架结构。JUC底层在Java中是unsafe，unsafe是jvm的实现。有了unsafe的支持，才出现可以进行原子操作的Atomic原子类…最后才到我们的Utils。</p><h2 id="🚀-进程和线程"><a class="header-anchor" href="#🚀-进程和线程">¶</a>🚀:进程和线程</h2><blockquote><p>官方：进程是CPU分配资源的最小单元，线程是CPU调度资源的最小单位</p></blockquote><p>Java默认有2个线程：mian(主线程)、GC(守护线程)</p><h2 id="🚢-并发和并行"><a class="header-anchor" href="#🚢-并发和并行">¶</a>🚢:并发和并行</h2><ul><li>并发（多个线程操作一个资源）：CPU一核，模拟出来多个线程</li><li>并行（多个人一起行走）：CPU多核，执行多条线程</li></ul><blockquote><p>线程有6个状态：</p></blockquote><ol><li><strong>NEW-&gt;新生</strong></li><li><strong>RUNNABLE-&gt;运行</strong></li><li><strong>BLOCKED-&gt;阻塞</strong></li><li><strong>WAITING-&gt;等待</strong></li><li><strong>TIMED_WAITING-&gt;死等</strong></li><li><strong>TERMINATED-&gt;终结</strong></li></ol><blockquote><p>wait/sleep区别</p></blockquote><ul><li>wait：<br>要释放锁<br>不需要捕获异常<br>只能在静态代码块中(<code>static</code>)</li><li>sleep：<br>不释放锁<br>需要捕获异常<br>任意地方都可以<strong>睡</strong></li></ul><h2 id="🔒-Lock-锁"><a class="header-anchor" href="#🔒-Lock-锁">¶</a>🔒:Lock(锁)</h2><blockquote><p>传统synchronized 本质：队列+锁 ——&gt; 排队</p></blockquote><p><code>java.util.concurrent.locks.Lock</code></p><p>其子类：</p><p><img src="https://raw.githubusercontent.com/YxYL6125/imgBad/main/img/image-20220915205227492.png" alt="image-20220915205227492"></p><blockquote><p>synchronized和lock的区别</p></blockquote><ul><li>synchronized  是关键字；lock是类</li><li>synchronized  不能判断锁的状态；lock可以判断锁</li><li>synchronized  自动释放锁；lock必须手动释放锁，不释放的话–&gt;死锁</li><li>synchronized  Thread1堵塞–&gt;Thread2等待；lock不一定等</li><li>synchronized  适合少代码同步；lock适合大量代码同步</li><li><strong>…</strong></li></ul><h2 id="⭐-JUC版的PC问题"><a class="header-anchor" href="#⭐-JUC版的PC问题">¶</a>⭐:JUC版的PC问题</h2><blockquote><p>通过lock找到Condition<br>condition来对线程进行监视操作(等待，唤醒…)<br>condition操作线程，可以精准的对线程的唤醒</p></blockquote><p><strong>资源类：</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Tea3</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">Lock</span> <span class="variable">lock</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ReentrantLock</span>();</span><br><span class="line">    <span class="keyword">private</span> <span class="type">Condition</span> <span class="variable">condition1</span> <span class="operator">=</span> lock.newCondition();</span><br><span class="line">    <span class="keyword">private</span> <span class="type">Condition</span> <span class="variable">condition2</span> <span class="operator">=</span> lock.newCondition();</span><br><span class="line">    <span class="keyword">private</span> <span class="type">Condition</span> <span class="variable">condition3</span> <span class="operator">=</span> lock.newCondition();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">number</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">printA</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            lock.lock();</span><br><span class="line">            <span class="comment">//业务</span></span><br><span class="line">            <span class="keyword">while</span> (number != <span class="number">1</span>) &#123;</span><br><span class="line">                <span class="comment">//等待</span></span><br><span class="line">                condition1.await();</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">&quot;=&gt;&quot;</span> + number);</span><br><span class="line">            number = <span class="number">2</span>;</span><br><span class="line">            <span class="comment">//通知</span></span><br><span class="line">            condition2.signal();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            lock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">printB</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            lock.lock();</span><br><span class="line">            <span class="comment">//业务</span></span><br><span class="line">            <span class="keyword">while</span> (number != <span class="number">2</span>) &#123;</span><br><span class="line">                <span class="comment">//等待</span></span><br><span class="line">                condition2.await();</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">&quot;=&gt;&quot;</span> + number);</span><br><span class="line">            number = <span class="number">3</span>;</span><br><span class="line">            <span class="comment">//通知</span></span><br><span class="line">            condition3.signal();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            lock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">printC</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            lock.lock();</span><br><span class="line">            <span class="comment">//业务</span></span><br><span class="line">            <span class="keyword">while</span> (number != <span class="number">3</span>) &#123;</span><br><span class="line">                <span class="comment">//等待</span></span><br><span class="line">                condition3.await();</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">&quot;=&gt;&quot;</span> + number);</span><br><span class="line">            number = <span class="number">1</span>;</span><br><span class="line">            <span class="comment">//通知</span></span><br><span class="line">            condition1.signal();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            lock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>这里看到判断线程操作资源等待的条件使用<code>while</code>判断而不用<code>if</code>，为了防止虚假唤醒的问题。</strong></p><h2 id="💦-集合类不安全"><a class="header-anchor" href="#💦-集合类不安全">¶</a>💦:集合类不安全</h2><p>我们知道在多线程下进行任何操作都是令人胆战心惊的。</p><p>多线程下，对集合CRUD，难免会遇到<code>ConcurrentModificationException</code>线程操作异常，是因为我们平常使用的ArrayList底层的数据操作方法都是单线程的，没有对线程进行处理。</p><p>针对这点，有3个常见的解决方案(仅基于Java层面)：</p><ol><li>使用Vector集合类，Vector集合类底层对集合操作进行了synchronized锁处理，但相对来说效率较低<br><code>List list = new Vector&lt;&gt;();</code></li><li>使用集合工具类中的**“锁集合”**，<code>Collections.synchronizedList(....);</code></li><li>使用<strong>读写锁集合(JUC)</strong>，<code>CopyOnWriteArrayList</code>底层对数据的集合操使用了JUC中的Lock锁类，效率较Vector自然<strong>upup</strong><br><code>List list = new CopyOnWriteArrayList();</code></li></ol><h2 id="🍶-线程池"><a class="header-anchor" href="#🍶-线程池">¶</a>🍶:线程池</h2><p>写到这里突然想起来那天学长面试的问题——说下线程的创建方法吧</p><p>头一次感受到当时开学用一个月学Java这门编程语言的时候到如今这样一个不太正式的面试，面临如此基础简单的问题 时是多么的无力…</p><p>创建线程一共有4个方法，但万变不离其宗，完全可以总结为一个方法——其最终都是执行的<code>Thread.start()</code>当中的<code>run()</code>方法</p><ol><li><p>实现<code>Runable</code>接口，重写<code>Run()</code>方法</p></li><li><p>实现<code>Callable</code>接口，重写<code>Call()</code>方法</p><ul><li><blockquote><p>与（1）不同的是，<code>Call()</code>方法是又返回值的，其类型由我们创建匿名内部类的时候指定泛型。而<code>Callable接口</code>本身并不是<code>Runable</code>的子类，创建线程可以通过该方法是因为：Thread在创建的时候是需要将<code>Runable</code>或其子类传入，其中包含了子类<code>FutureTask</code>这样一个类，在创建这个类时可将Callable接口的实现当做构造参数传进去，以达到创建线程的目的…</p></blockquote></li></ul></li><li><p>💩直接New Thread</p></li><li><p>通过线程池创建…</p></li></ol><hr><p><strong>池化技术</strong></p><blockquote><p>程序运行的本质是：占用OS的资源，而优化资源的使用——&gt;池化技术</p><p>事先准备好一些资源，需要用的话从我这儿拿，用完还我</p></blockquote><p>其优点：</p><ul><li>降低资源的消耗：本质即优化资源的使用效率</li><li>方便线程管理：创建线程池初始化事先线程</li><li>提高响应速度：不用频繁的创建和销毁线程</li></ul><h3 id="线程池的3个Func"><a class="header-anchor" href="#线程池的3个Func">¶</a>线程池的3个Func</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Executor</span> <span class="variable">executor1</span> <span class="operator">=</span> Executors.newSingleThreadExecutor(); -- 单例线程</span><br><span class="line"><span class="type">Executor</span> <span class="variable">executor2</span> <span class="operator">=</span> Executors.newFixedThreadPool(<span class="number">5</span>); -- 固定线程</span><br><span class="line"><span class="type">Executor</span> <span class="variable">executor3</span> <span class="operator">=</span> Executors.newCachedThreadPool(); --弹性</span><br></pre></td></tr></table></figure><h3 id="线程池的7个参数"><a class="header-anchor" href="#线程池的7个参数">¶</a>线程池的7个参数</h3><p>通过三个Func可以看出来，<code>Executors.newCachedThreadPool(); --弹性</code>这样一个方法是值得我们青睐的，</p><p>其构造方法：</p><img src="C:/Users/%E9%9B%B7%E7%A5%9E%E6%88%98%E6%9C%BA/AppData/Roaming/Typora/typora-user-images/image-20220918095441793.png" alt="image-20220918095441793" style="zoom: 65%;" /><blockquote><p>但是读源码我们可以看到</p></blockquote><img src="https://raw.githubusercontent.com/YxYL6125/imgBad/main/img/image-20220918094909666.png" alt="image-20220918094909666" style="zoom: 80%;" /><blockquote><p>这里<strong>允许的创建线程数量</strong>是：<code>Integer.MAX_VALUE</code> = 2^31 - 1 ——&gt;<strong>可能会堆积大量的请求，从而导致 OOM！</strong></p></blockquote><p><img src="https://raw.githubusercontent.com/YxYL6125/imgBad/main/img/image-20220918095025854.png" alt="image-20220918095025854"></p><blockquote><p>这也是阿里巴巴开发手册里面提到的，线程池不允许使用 <code>Executors</code> 去创建，而是通过 <code>ThreadPoolExecutor</code> 这样一个原生的方式来创建线程。</p></blockquote><hr><p>归言：其7个参数分别：</p><ol><li>int <code>corePoolSize</code>：<strong>核心线程数</strong></li><li>int <code>maximumPoolSize</code>：<strong>最大创建线程数</strong></li><li>long <code>keepAliveTime</code>：<strong>存活时间</strong></li><li>TimeUnit <code>unit</code>：<strong>Time类管理工具</strong></li><li>BlockingQueue<Runnable> <code>workQueue</code>：指定阻塞队列</li><li>ThreadFactory <code>threadFactory</code>：<strong>线程工厂</strong></li><li>RejectedExecutionHandler <code>handler</code>：<strong>拒绝策略</strong></li></ol><h3 id="线程池的4中拒绝策略"><a class="header-anchor" href="#线程池的4中拒绝策略">¶</a>线程池的4中拒绝策略</h3><ul><li><code>new ThreadPoolExecutor.AbortPolicy()</code> // 银行满了，还有人进来，不处理这个人的，抛出异常</li><li><code>new ThreadPoolExecutor.CallerRunsPolicy()</code> //哪来的去哪里!</li><li><code>new ThreadPoolExecutor.DiscardPolicy()</code> //队列满了，丢掉任务，不会抛出异常!</li><li><code>new ThreadPoolExecutor.DiscardoldestPolicyO()</code> //队列满了，尝试去和最早的竞争，也不会抛出异常!</li></ul>]]></content>
      
      
      <categories>
          
          <category> Tech-Stuck </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JUC </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
